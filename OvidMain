# coding=utf-8
# Emma Hamel, Jan 4, 2017
import re
import random
import sqlite3

#connect to brown corpus, reference database for pos
conn_brown = sqlite3.connect('browncorpus.db')
cb = conn_brown.cursor()

#to store sentence structures for Ovid to reference later
conn_struct = sqlite3.connect('structure.db')
cs = conn_struct.cursor()

#for all the words ovid will use in its sentences
conn_word = sqlite3.connect('ovidswords.db')
cw = conn_word.cursor()

conn_nap = sqlite3.connect('nap.db')
cnp = conn_nap.cursor()

#an array to help ovid identify punctuation
punctuation = ('.', ',', "'", '-', '_', '?', ";", ":", '!', '(', ')', '{', '}', '[', ']', '/')

#these are all the pos tags used by the Brown Corpus, arranged roughly by function
#We will uses these to determine the pos of speech for words with multiple pos
def_art = ['at', 'abx', 'ap', 'abl', 'abn']
nouns = ['nn', 'nn$', 'nns', 'nns$', 'np', 'np$', 'nps$', 'nps', 'pps', 'ppss', 'prp']
verbs = ['vb', 'vbd', 'vbg', 'vbn', 'vbp', 'vbz']
o_noun = ['pp$', 'pn', 'pp$$', 'ppl', 'ppls', 'ppo', 'prp']
conjun = ['cc']
sub_conjun = ['cs']
be = ['be', 'bed', 'bedz', 'beg', 'bem', 'ben', 'ber', 'bez']
num = ['cd', 'od']
do = ['do', 'dod', 'doz']
deter = ['dt', 'dti', 'dts', 'dtx']
ext_there = ['ex']
have = ['hv', 'hvd', ' hvg']
prep = ['in']
adject = ['jj', 'jjr', 'jjs', 'jjt']
aux = ['md']
poss = ['prp$']
qual = ['ql']
post_qual = ['qlp']
adverb = ['rb', 'rbr', 'rbt', 'rn', 'rp']
infin = ['to']
interject = ['uh']
w_deter = ['wdt', 'wp$', 'wps', 'wql', 'wrb']

#put sentence structure (used in the pos tagger part) here
sentenceStr = []

#in the writing mod, we use this to store all the id numbers for a certain part of speech in ovid's words
#helps ovid choose a word
pos_id = []

#ovid's working sentence it creates in the writing modual
finalsentence = []

NP_rand = [[]]

NP_num = []

NP_name = []

#indexes for our databases
#this is important for fast, efficient sql queries
cb.execute('''CREATE INDEX IF NOT EXISTS brown_index
       on words (word);''')

cs.execute('''CREATE INDEX IF NOT EXISTS structure_index
       on sentences (id, sentence);''')

cw.execute('''CREATE INDEX IF NOT EXISTS ovid_index
       on words (id, word, pos);''')

cnp.execute('''CREATE INDEX IF NOT EXISTS nap_index
       on nap (id, word, pos, num);''')

conn_brown.commit()
conn_struct.commit()
conn_word.commit()
conn_nap.commit()


#open up the file with the text inside
path = '/Users/emmahamel/Documents/The Illiad- book 1'

file = open("Finished text.txt", 'w')

#this is the pos tagger and sentence structure creator
#here, ovid chooses the words it will use and analyze sentence structures via pos
with open(path) as f:
    for line in f:
        #split the text up by sentence, making it a more manageable load
        text_sentence = [x + "." for x in line.split(".")]
        print(text_sentence)

        #looking for punctuation
        for n in range(0, len(text_sentence) - 1):
            #split up the sentence by word and punctuation
            word = re.findall(r"[\w']+|[.',!?;)(:{}]", text_sentence[n])

            #query each word and identify the word type
            for i in range(0, len(word)):
                cb.execute('''SELECT DISTINCT word, pos FROM words WHERE word = (?);''', (word[i],))
                cb_data = cb.fetchall()

                #if it only has one part of speech, then it only has one part of speech!...
                if cb_data and len(cb_data) == 1:
                    pos = cb_data[0][1]
                    sentenceStr.append(pos)
                    cw.execute('''INSERT INTO words (word, pos) VALUES (?, ?);''', (cb_data[0][0], cb_data[0][1]))
                    conn_word.commit()
                    print(sentenceStr)

                #... but if it doesn't, then ovid goes though a series of test to identify the pos
                #using the words around it in the sentence
                elif cb_data and len(cb_data) > 1:
                    for l in range(0, len(cb_data)):
                        pos = cb_data[l][1]

                        if len(sentenceStr) >= 1:
                            previous = sentenceStr[-1]

                            if previous in punctuation:
                                previous = sentenceStr[-2]

                            if previous in nouns and pos in verbs:
                                sentenceStr.append(pos)

                            elif previous in verbs and pos in o_noun:
                                sentenceStr.append(pos)

                            elif previous in def_art and pos in nouns:
                                sentenceStr.append(pos)

                            elif previous in adverb and pos in verbs:
                                sentenceStr.append(pos)

                            elif previous in adject and pos in nouns:
                                sentenceStr.append(pos)

                            elif previous in poss and pos in nouns:
                                sentenceStr.append(pos)

                            elif previous in be and pos in verbs:
                                sentenceStr.append(pos)

                            elif previous in sub_conjun and pos in nouns or adverb:
                                sentenceStr.append(pos)

                            elif previous in adverb and pos in verbs:
                                sentenceStr.append(pos)

                        elif len(sentenceStr) == 0:
                            nex = word[i+1]
                            if nex not in punctuation:
                                cb.execute('''SELECT word, pos FROM words WHERE word = (?);''', (nex,))
                                next_cb_data = cb.fetchall()
                                nex_pos = next_cb_data[0][1]

                            elif nex in punctuation:
                                nex_word = word[i+2]
                                cb.execute('''SELECT word, pos FROM words WHERE word = (?);''', (nex_word,))
                                next_cb_data = cb.fetchall()
                                nex_pos = next_cb_data[0][1]

                            if nex_pos in nouns and pos in verbs:
                                sentenceStr.append(pos)

                            elif nex_pos in verbs and pos in o_noun:
                                sentenceStr.append(pos)

                            elif nex_pos in def_art and pos in nouns:
                                sentenceStr.append(pos)

                            elif nex_pos in adverb and pos in verbs:
                                sentenceStr.append(pos)

                            elif nex_pos in adject and pos in nouns:
                                sentenceStr.append(pos)

                            elif nex_pos in poss and pos in nouns:
                                sentenceStr.append(pos)

                            elif nex_pos in be and pos in verbs:
                                sentenceStr.append(pos)

                            elif nex_pos in sub_conjun and pos in nouns or adverb:
                                sentenceStr.append(pos)

                            elif nex_pos in adverb and pos in verbs:
                                sentenceStr.append(pos)

                #our addition of the Brown Corpus does not have proper nouns
                #therefore, any word that is not in it and is not in punctuation must be a proper noun
                #this decides is its a singular proper noun, plural proper noun, possessive proper noun, or
                #possessive plural proper noun
                elif not cb_data and word[i] not in punctuation:
                    split = list(word[i])
                    print(sentenceStr)
                    if split[-1] == 's' and split[-2] == "'":
                        pos = 'NP$'
                        sentenceStr.append(pos)
                        cw.execute('''INSERT INTO words (word, pos) VALUES (?, ?);''', (word[i], pos))
                        conn_word.commit()

                    elif split[-1] == "'" and split[-2] == 's':
                        pos = 'NPS$'
                        sentenceStr.append(pos)
                        cw.execute('''INSERT INTO words (word, pos) VALUES (?, ?);''', (word[i], pos))
                        conn_word.commit()

                    elif split[-1] == 's' and split[-2] != "'":

                        if len(sentenceStr) > 0:
                            before = sentenceStr[-1]
                            if before in punctuation:
                                before = sentenceStr[-2]

                            if before == 'AT' or before == 'DTI' or before == 'DTs':
                                pos = 'NPS'
                                sentenceStr.append(pos)
                                cw.execute('''INSERT INTO words (word, pos) VALUES (?, ?);''', (word[i], pos))
                                conn_word.commit()

                            else:
                                pos = 'NP'
                                sentenceStr.append(pos)
                                cw.execute('''INSERT INTO words (word, pos) VALUES (?, ?);''', (word[i], pos))
                                conn_word.commit()

                        elif len(sentenceStr) == 0:
                            nex = word[i + 1]
                            if nex not in punctuation:
                                cb.execute('''SELECT word, pos FROM words WHERE word = (?);''', (nex,))
                                next_cb_data = cb.fetchall()
                                nex_pos = next_cb_data[0][1]

                            elif nex in punctuation:
                                nex_word = word[i + 2]
                                cb.execute('''SELECT word, pos FROM words WHERE word = (?);''', (nex_word,))
                                next_cb_data = cb.fetchall()
                                nex_pos = next_cb_data[0][1]

                            if nex_pos == 'AT' or nex_pos == 'DTI' or nex_pos == 'DTs':
                                pos = 'NPS'
                                sentenceStr.append(pos)
                                cw.execute('''INSERT INTO words (word, pos) VALUES (?, ?);''', (word[i], pos))
                                conn_word.commit()

                            else:
                                pos = 'NP'
                                sentenceStr.append(pos)
                                cw.execute('''INSERT INTO words (word, pos) VALUES (?, ?);''', (word[i], pos))
                                conn_word.commit()


                    elif split[-1] != 's':
                        pos = 'NP'
                        sentenceStr.append(pos)
                        cw.execute('''INSERT INTO words (word, pos) VALUES (?, ?);''', (word[i], pos))
                        conn_word.commit()

                elif not cb_data and word[i] in punctuation:
                    sentenceStr.append(word[i])

                    #is its a period, the sentence is over
                    if word[i] == '.':
                        sentence = ' '.join(sentenceStr)
                        cs.execute('''INSERT INTO sentences (sentence) VALUES (?);''', (sentence,))
                        conn_struct.commit()
                        sentenceStr.clear()

#count how many sentences there are, this will determine how long it is
#This number will be used in the writing loop down below
cs.execute('''SELECT COUNT(*) FROM sentences''')
data = cs.fetchone()
c_list = list(data)
c = c_list[0]
count = int(c)

#writing modual
for i in range (0, count):
    cs.execute('''SELECT sentence FROM sentences ORDER BY RANDOM();''')
    sent_data = cs.fetchone()

    if sent_data:
        #picks a sentence, and then writes a sentence on its own
        ovids_sentence= sent_data[0]
        pos_list = ovids_sentence.split()
        for j in range (0, len(pos_list)):
            pos = pos_list[j]

            #this is the weighted decision
            #certain nouns will be choosen over others, making it more of a story
            if pos == 'NP$' or 'NPS' or 'NPS$' or 'NP':
                #NAP database is our names and places (proper nouns) database
                cnp.execute('''SELECT word, num FROM nap WHERE pos = (?);''', (pos,))
                NP_data = cnp.fetchall()

                #if the database is full
                if NP_data:
                    for x in range(0, len(NP_data)):
                        number1 = NP_data[x][1]
                        number2 = int(number1)
                        rand_gen = random.randint(1, 40)
                        number = rand_gen + number2
                        NP_num.append(number)
                        NP_name.append([number, NP_data[x][0], NP_data[x][1]])

                    bottom_bound = random.randint(1, 19)
                    top_bound = random.randint(20, 40)

                    choice = max(NP_num)

                    if choice < top_bound or choice > bottom_bound:
                        for v in range(0, len(NP_name) - 1):
                            if NP_name[v][0] == choice:
                                values = list(NP_name[v])
                                final_name = values[1]
                                finalsentence.append(final_name)
                                NP_int = int(values[2])
                                NP_int += 1
                                cnp.execute('''UPDATE nap SET num = (?) WHERE word = (?)''', (NP_int, final_name))
                                conn_nap.commit()
                                NP_num.clear()
                                NP_name.clear()
                                break

                    elif choice > top_bound or choice < bottom_bound:
                        break

            cw.execute('''SELECT id, word, pos FROM words WHERE pos = ?''', (pos,))
            info = cw.fetchall()

            if info:
                for l in range (0, len(info)):
                    pos_id1 = info[l][0]
                    pos_id.append(pos_id1)

                array_num1 = random.sample(pos_id, 1)
                rand_num1 = array_num1[0]
                cw.execute('''SELECT word FROM words WHERE id = (?);''', (rand_num1,))
                ov_choice = cw.fetchone()
                finalsentence.append(ov_choice[0])
                pos_id.clear()

                cnp.execute('''SELECT id FROM nap WHERE word = ?''', (ov_choice[0],))
                NP_found = cnp.fetchall()

                if not NP_found:
                    cnp.execute('''INSERT INTO nap (word, pos, num) VALUES (?, ?, 0);''', (ov_choice[0], pos))
                    conn_nap.commit()

            elif not info:
                if pos in punctuation:
                    finalsentence.append(pos)

                    if pos == '.':
                        fs = ' '.join(finalsentence)
                        file.writelines(fs + "\n")
                        cs.execute('''DELETE FROM sentences WHERE sentence = (?);''', (sent_data,))
                        conn_struct.commit()
                        finalsentence.clear()

            elif not info and pos not in punctuation:
                print("Error in writing mod: pos not in ovid's words or punctuation")

    if not sent_data:
        cs.execute('''SELECT COUNT(*) FROM sentences''')
        num_data = cs.fetchone()
        n_list = list(data)
        n = c_list[0]
        num_data1 = int(c)

        if num_data1 > 0:
            print("Error in writing mod: Not in sent_data!!")
            break

        if num_data == 0:
            print("Finished")
            break

file.close()
